'use strict';

const express = require(`express`);
const request = require(`supertest`);
const {describe, test, beforeAll, expect} = require(`@jest/globals`);
const {Sequelize} = require(`sequelize`);

const search = require(`./search`);
const DataService = require(`../data-service/search`);
const initDb = require(`../lib/init-db`);
const {HttpCode} = require(`../const`);

const mockCategories = [`Деревья`, `За жизнь`, `Без рамки`, `Разное`, `IT`];
const mockArticles = [
  {
    "title": `Как перестать беспокоиться и начать жить`,
    "announce": `301 Moved Permanently — запрошенный документ был окончательно перенесен на новый URI, указанный в поле Location заголовка. 200 OK — успешный запрос. Если клиентом были запрошены какие-либо данные, то они находятся в заголовке и/или теле сообщения.`,
    "fullText": `Программировать не настолько сложно, как об этом говорят. Содержание строк остаётся на ваше усмотрение. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Собрать камни бесконечности легко, если вы прирожденный герой.`,
  },
  {
    "title": `Как достигнуть успеха не вставая с кресла`,
    "announce": `Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике.`,
    "fullText": `Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Программировать не настолько сложно, как об этом говорят. Как начать действовать? Для начала просто соберитесь. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Собрать камни бесконечности легко, если вы прирожденный герой. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Это один из лучших рок-музыкантов. Золотое сечение — соотношение двух величин, гармоническая пропорция. Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Первая большая ёлка была установлена только в 1938 году. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Ёлки — это не просто красивое дерево. Это прочная древесина. Содержание строк остаётся на ваше усмотрение.`,
  },
  {
    "title": `Борьба с прокрастинацией`,
    "announce": `Содержание строк остаётся на ваше усмотрение.`,
    "fullText": `Игры и программирование разные вещи. Не стоит идти в программисты, если вам нравятся только игры. Этот смартфон — настоящая находка. Большой и яркий экран, мощнейший процессор — всё это в небольшом гаджете. Ёлки — это не просто красивое дерево. Это прочная древесина. Простые ежедневные упражнения помогут достичь успеха. Достичь успеха помогут ежедневные повторения. Первая большая ёлка была установлена только в 1938 году. Золотое сечение — соотношение двух величин, гармоническая пропорция. Процессор заслуживает особого внимания. Он обязательно понравится геймерам со стажем. Альбом стал настоящим открытием года. Мощные гитарные рифы и скоростные соло-партии не дадут заскучать. Собрать камни бесконечности легко, если вы прирожденный герой. Освоить вёрстку несложно. Возьмите книгу новую книгу и закрепите все упражнения на практике. Рок-музыка всегда ассоциировалась с протестами. Так ли это на самом деле? Как начать действовать? Для начала просто соберитесь. Помните, небольшое количество ежедневных упражнений лучше, чем один раз, но много. Программировать не настолько сложно, как об этом говорят. Содержание строк остаётся на ваше усмотрение. 200 OK — успешный запрос. Если клиентом были запрошены какие-либо данные, то они находятся в заголовке и/или теле сообщения. Бороться с прокрастинацией несложно. Просто действуйте. Маленькими шагами.`,
  },
];
const mockUsers = [`Иван Иванов ivan@mail.com ivanov`];
const mockComments = [
  `Плюсую, но слишком много буквы! Согласен с автором! Хочу такую же футболку :-)`,
  `Мне не нравится ваш стиль. Ощущение, что вы меня поучаете. Совсем немного...`,
];

const mockDb = new Sequelize(`sqlite::memory:`, {logging: false});
const app = express();
app.use(express.json());

beforeAll(async () => {
  await initDb(mockDb, {
    categories: mockCategories,
    users: mockUsers,
    articles: mockArticles,
    comments: mockComments,
  });

  search(app, new DataService(mockDb));
});

describe(`API returns offer based on search query`, () => {
  let response;

  beforeAll(async () => {
    response = await request(app)
      .get(`/search`)
      .query({query: `Как перестать беспокоиться`});
  });

  test(`Status code 200`, () => expect(response.statusCode).toBe(HttpCode.OK));

  test(`1 article found`, () => expect(response.body.length).toBe(1));

  test(`Article has title "Как перестать беспокоиться и начать жить"`, () =>
    expect(response.body[0].title).toEqual(`Как перестать беспокоиться и начать жить`));

});

test(`API returns code 404 if nothing is found`, () => {

  return request(app).get(`/search`).query({query: `not found query`})
    .expect(HttpCode.NOT_FOUND);
});

test(`API returns 400 when query string is absent`, () => {

  return request(app).get(`/search`)
    .expect(HttpCode.BAD_REQUEST);
});

test(`API returns 404 when method is post`, () => {

  return request(app).post(`/search`)
    .expect(HttpCode.NOT_FOUND);
});
